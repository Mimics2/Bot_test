import logging
import sqlite3
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.error import BadRequest, Forbidden

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
BOT_TOKEN = "7557745613:AAFTpWsCJ2bZMqD6GDwTynnqA8Nc-mRF1Rs"
ADMIN_ID = 6646433980
DB_PATH = "bot_database.db"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
class Database:
    def __init__(self, db_path):
        self.db_path = db_path
        self.init_db()
    
    def get_connection(self):
        return sqlite3.connect(self.db_path)
    
    def init_db(self):
        conn = self.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                joined_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS channels (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT,
                url TEXT,
                name TEXT,
                channel_type TEXT DEFAULT 'public',
                telegram_chat_id TEXT
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS subscriptions (
                user_id INTEGER,
                channel_id INTEGER,
                confirmed BOOLEAN DEFAULT FALSE,
                PRIMARY KEY (user_id, channel_id)
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS final_channels (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                url TEXT,
                name TEXT,
                description TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def add_user(self, user_id, username, full_name):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute(
                'INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)',
                (user_id, username, full_name)
            )
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def add_channel(self, username, url, name, channel_type='public', telegram_chat_id=None):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO channels (username, url, name, channel_type, telegram_chat_id) VALUES (?, ?, ?, ?, ?)',
                (username, url, name, channel_type, telegram_chat_id)
            )
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    def get_channels(self):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM channels ORDER BY id')
            channels = cursor.fetchall()
            conn.close()
            return channels
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def add_final_channel(self, url, name, description=""):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO final_channels (url, name, description) VALUES (?, ?, ?)',
                (url, name, description)
            )
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    def get_final_channels(self):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM final_channels ORDER BY id')
            channels = cursor.fetchall()
            conn.close()
            return channels
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def confirm_subscription(self, user_id, channel_id):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute(
                'INSERT OR REPLACE INTO subscriptions (user_id, channel_id, confirmed) VALUES (?, ?, TRUE)',
                (user_id, channel_id)
            )
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    def is_subscribed(self, user_id, channel_id):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute(
                'SELECT confirmed FROM subscriptions WHERE user_id = ? AND channel_id = ?',
                (user_id, channel_id)
            )
            result = cursor.fetchone()
            conn.close()
            return result[0] if result else False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    def get_user_count(self):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM users')
            result = cursor.fetchone()[0]
            conn.close()
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return 0
    
    def remove_channel(self, channel_id):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('DELETE FROM channels WHERE id = ?', (channel_id,))
            cursor.execute('DELETE FROM subscriptions WHERE channel_id = ?', (channel_id,))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    def remove_final_channel(self, channel_id):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('DELETE FROM final_channels WHERE id = ?', (channel_id,))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(DB_PATH)

# ===== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–û–ö =====
async def check_user_subscriptions(user_id, bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤"""
    channels = db.get_channels()
    missing_channels = []
    all_subscribed = True
    
    for channel in channels:
        channel_id, username, url, name, channel_type, telegram_chat_id = channel
        
        if channel_type == 'public':
            try:
                subscribed = False
                
                # üîß –°–ü–û–°–û–ë 1: –ü–æ–∏—Å–∫ –ø–æ username (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
                if username and username.startswith('@'):
                    try:
                        clean_username = username.lstrip('@')
                        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª '{name}' –ø–æ username: @{clean_username}")
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                        chat = await bot.get_chat(f"@{clean_username}")
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: {chat.title} (ID: {chat.id})")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        chat_member = await bot.get_chat_member(chat.id, user_id)
                        subscribed = chat_member.status in ['member', 'administrator', 'creator']
                        
                        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ '{name}': {subscribed}")
                        
                    except BadRequest as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ username @{clean_username}: {e}")
                        
                        # üîß –°–ü–û–°–û–ë 2: –ü—Ä–æ–±—É–µ–º –ø–æ —Å—Å—ã–ª–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å telegram_chat_id)
                        if telegram_chat_id:
                            try:
                                logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ chat_id: {telegram_chat_id}")
                                chat_member = await bot.get_chat_member(telegram_chat_id, user_id)
                                subscribed = chat_member.status in ['member', 'administrator', 'creator']
                                logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ chat_id —É—Å–ø–µ—à–Ω–∞: {subscribed}")
                            except BadRequest as e2:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ chat_id {telegram_chat_id}: {e2}")
                                subscribed = False
                        else:
                            subscribed = False
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                if not subscribed:
                    all_subscribed = False
                    missing_channels.append({
                        'id': channel_id,
                        'name': name,
                        'url': url,
                        'type': 'public'
                    })
                    
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ '{name}': {e}")
                all_subscribed = False
                missing_channels.append({
                    'id': channel_id,
                    'name': f"{name} (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏)",
                    'url': url,
                    'type': 'public'
                })
        
        elif channel_type == 'private':
            if not db.is_subscribed(user_id, channel_id):
                all_subscribed = False
                missing_channels.append({
                    'id': channel_id,
                    'name': name,
                    'url': url,
                    'type': 'private'
                })
    
    return all_subscribed, missing_channels

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    db.add_user(user.id, user.username, user.full_name)
    
    welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ üëá
    """
    
    keyboard = [[InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscriptions")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
    user = update.effective_user
    db.add_user(user.id, user.username, user.full_name)
    
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫–∏...")
    
    all_subscribed, missing_channels = await check_user_subscriptions(user.id, context.bot)
    
    if all_subscribed:
        await show_final_content(update, context)
    else:
        await show_subscription_requests(update, context, missing_channels)

async def show_subscription_requests(update: Update, context: ContextTypes.DEFAULT_TYPE, missing_channels):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É"""
    if not missing_channels:
        await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!")
        return
    
    keyboard = []
    
    for channel in missing_channels:
        if channel['type'] == 'public':
            keyboard.append([InlineKeyboardButton(f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel['name']}", url=channel['url'])])
        else:
            keyboard.append([
                InlineKeyboardButton(f"üîê {channel['name']}", url=channel['url']),
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{channel['id']}")
            ])
    
    keyboard.append([InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscriptions")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = "üìã –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n"
    for channel in missing_channels:
        if channel['type'] == 'public':
            message_text += f"‚Ä¢ {channel['name']} (–ø—É–±–ª–∏—á–Ω—ã–π)\n"
        else:
            message_text += f"‚Ä¢ {channel['name']} (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)\n"
    
    message_text += "\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup)

async def show_final_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    final_channels = db.get_final_channels()
    
    if not final_channels:
        message_text = """
‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!

–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã.

–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞.
        """
        
        keyboard = [[InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscriptions")]]
        
        if update.effective_user.id == ADMIN_ID:
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup)
        return
    
    channel = final_channels[0]
    channel_id, url, name, description = channel
    
    message_text = f"""
üéâ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!

üìÅ {name}
{description or '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ üëá
    """
    
    keyboard = [
        [InlineKeyboardButton("üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É", url=url)],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscriptions")]
    ]
    
    if update.effective_user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup)

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_count = db.get_user_count()
    channels = db.get_channels()
    final_channels = db.get_final_channels()
    
    message_text = f"""
‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}
‚Ä¢ üì∫ –ö–∞–Ω–∞–ª–æ–≤: {len(channels)}
‚Ä¢ üíé –§–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(final_channels)}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    keyboard = [
        [InlineKeyboardButton("üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="manage_channels")],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscriptions")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup)

async def show_manage_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"""
    channels = db.get_channels()
    final_channels = db.get_final_channels()
    
    message_text = f"""
üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏

üì∫ –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ({len(channels)}):
"""
    
    for channel in channels:
        channel_id, username, url, name, channel_type, telegram_chat_id = channel
        type_icon = "üîì" if channel_type == 'public' else "üîí"
        identifier = f"@{username}" if username else "—Å—Å—ã–ª–∫–∞"
        message_text += f"{type_icon} {name} ({identifier})\n"
    
    message_text += f"\nüíé –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã ({len(final_channels)}):\n"
    
    for channel in final_channels:
        channel_id, url, name, description = channel
        message_text += f"üíé {name}\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="add_public_channel")],
        [InlineKeyboardButton("‚ûï –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="add_private_channel")],
        [InlineKeyboardButton("üíé –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="add_final_channel")],
    ]
    
    if channels:
        keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="show_delete_channels")])
    
    if final_channels:
        keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="show_delete_final")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup)

async def show_delete_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    channels = db.get_channels()
    
    if not channels:
        await update.callback_query.answer("‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return
    
    message_text = "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    
    keyboard = []
    for channel in channels:
        channel_id, username, url, name, channel_type, telegram_chat_id = channel
        type_icon = "üîì" if channel_type == 'public' else "üîí"
        keyboard.append([InlineKeyboardButton(f"{type_icon} {name}", callback_data=f"delete_channel_{channel_id}")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_channels")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)

async def show_delete_final(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    channels = db.get_final_channels()
    
    if not channels:
        await update.callback_query.answer("‚ùå –ù–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return
    
    message_text = "üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    
    keyboard = []
    for channel in channels:
        channel_id, url, name, description = channel
        keyboard.append([InlineKeyboardButton(f"üíé {name}", callback_data=f"delete_final_{channel_id}")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_channels")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    data = query.data
    
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {data} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
    
    try:
        if data == "check_subscriptions":
            db.add_user(user.id, user.username, user.full_name)
            all_subscribed, missing_channels = await check_user_subscriptions(user.id, context.bot)
            
            if all_subscribed:
                await show_final_content(update, context)
            else:
                await show_subscription_requests(update, context, missing_channels)
        
        elif data.startswith("confirm_"):
            channel_id = int(data.split("_")[1])
            
            if db.confirm_subscription(user.id, channel_id):
                await query.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
                all_subscribed, missing_channels = await check_user_subscriptions(user.id, context.bot)
                
                if all_subscribed:
                    await show_final_content(update, context)
                else:
                    await show_subscription_requests(update, context, missing_channels)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        
        elif data == "admin_panel":
            if user.id == ADMIN_ID:
                await show_admin_panel(update, context)
            else:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        
        elif data == "manage_channels":
            if user.id == ADMIN_ID:
                await show_manage_channels(update, context)
            else:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        
        elif data == "add_public_channel":
            if user.id == ADMIN_ID:
                context.user_data['awaiting_channel'] = 'public'
                await query.edit_message_text(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "@username –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n\n"
                    "–ü—Ä–∏–º–µ—Ä:\n"
                    "@my_channel –ú–æ–π –ö–∞–Ω–∞–ª\n\n"
                    "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                    "‚Ä¢ –ö–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π\n" 
                    "‚Ä¢ –ï—Å—Ç—å username (@...)\n"
                    "‚Ä¢ –ë–æ—Ç - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞"
                )
            else:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        
        elif data == "add_private_channel":
            if user.id == ADMIN_ID:
                context.user_data['awaiting_channel'] = 'private'
                await query.edit_message_text(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n"
                    "—Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n\n"
                    "–ü—Ä–∏–º–µ—Ä:\n"
                    "https://t.me/+ABC123def456 –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ö–∞–Ω–∞–ª"
                )
            else:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        
        elif data == "add_final_channel":
            if user.id == ADMIN_ID:
                context.user_data['awaiting_channel'] = 'final'
                await query.edit_message_text(
                    "üíé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "—Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ –û–ø–∏—Å–∞–Ω–∏–µ\n\n"
                    "–ü—Ä–∏–º–µ—Ä:\n"
                    "https://t.me/premium –ü—Ä–µ–º–∏—É–º –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
                )
            else:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        
        elif data == "show_delete_channels":
            if user.id == ADMIN_ID:
                await show_delete_channels(update, context)
            else:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        
        elif data == "show_delete_final":
            if user.id == ADMIN_ID:
                await show_delete_final(update, context)
            else:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        
        elif data.startswith("delete_channel_"):
            if user.id == ADMIN_ID:
                channel_id = int(data.split("_")[2])
                if db.remove_channel(channel_id):
                    await query.answer("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω!")
                    await show_manage_channels(update, context)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
            else:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        
        elif data.startswith("delete_final_"):
            if user.id == ADMIN_ID:
                channel_id = int(data.split("_")[2])
                if db.remove_final_channel(channel_id):
                    await query.answer("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω!")
                    await show_manage_channels(update, context)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
            else:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data}")
            await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    
    if user.id == ADMIN_ID and context.user_data.get('awaiting_channel'):
        channel_type = context.user_data['awaiting_channel']
        text = update.message.text.strip()
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ {channel_type}: {text}")
        
        try:
            if channel_type == 'public':
                parts = text.split(' ', 1)
                if len(parts) == 2 and parts[0].startswith('@'):
                    username = parts[0]
                    name = parts[1]
                    clean_username = username.lstrip('@')
                    url = f"https://t.me/{clean_username}"
                    
                    # üîß –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID
                    try:
                        chat = await context.bot.get_chat(f"@{clean_username}")
                        telegram_chat_id = str(chat.id)
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: {chat.title} (ID: {telegram_chat_id})")
                        
                        if db.add_channel(username, url, name, 'public', telegram_chat_id):
                            await update.message.reply_text(
                                f"‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                                f"üîó –°—Å—ã–ª–∫–∞: {url}\n"
                                f"üë§ Username: {username}\n"
                                f"üÜî ID –∫–∞–Ω–∞–ª–∞: {telegram_chat_id}"
                            )
                            await show_manage_channels(update, context)
                        else:
                            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
                    
                    except BadRequest as e:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª @{clean_username}: {e}")
                        await update.message.reply_text(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª @{clean_username}\n\n"
                            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                            f"‚Ä¢ –ö–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—É–±–ª–∏—á–Ω—ã–π\n"
                            f"‚Ä¢ Username –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π\n"
                            f"‚Ä¢ –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞"
                        )
                        return
                    
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "@username –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n\n"
                        "–ü—Ä–∏–º–µ—Ä:\n"
                        "@my_channel –ú–æ–π –ö–∞–Ω–∞–ª"
                    )
            
            elif channel_type == 'private':
                parts = text.split(' ', 1)
                if len(parts) == 2:
                    url = parts[0]
                    name = parts[1]
                    
                    if db.add_channel(None, url, name, 'private'):
                        await update.message.reply_text(
                            f"‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                            f"üîó –°—Å—ã–ª–∫–∞: {url}"
                        )
                        await show_manage_channels(update, context)
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "—Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n\n"
                        "–ü—Ä–∏–º–µ—Ä:\n"
                        "https://t.me/+ABC123def456 –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ö–∞–Ω–∞–ª"
                    )
            
            elif channel_type == 'final':
                parts = text.split(' ', 2)
                if len(parts) >= 2:
                    url = parts[0]
                    name = parts[1]
                    description = parts[2] if len(parts) > 2 else ""
                    
                    if db.add_final_channel(url, name, description):
                        await update.message.reply_text(
                            f"üíé –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                            f"üîó –°—Å—ã–ª–∫–∞: {url}\n"
                            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
                        )
                        await show_manage_channels(update, context)
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ [–û–ø–∏—Å–∞–Ω–∏–µ]")
            
            context.user_data['awaiting_channel'] = None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            context.user_data['awaiting_channel'] = None
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "/admin - –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"
        )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if update.effective_user.id == ADMIN_ID:
        await show_admin_panel(update, context)
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

async def set_commands(application: Application):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("check", "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"),
        BotCommand("admin", "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    ]
    await application.bot.set_my_commands(commands)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤...")
    print("üîß –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    print("   ‚Ä¢ –ë–æ—Ç –∏—â–µ—Ç –∫–∞–Ω–∞–ª –ø–æ username –∏ –ø–æ–ª—É—á–∞–µ—Ç –µ–≥–æ ID")
    print("   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ '—á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'")
    print("   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
    
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("check", check_command))
        application.add_handler(CommandHandler("admin", admin_command))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        application.post_init = set_commands
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π –∏ –∏–º–µ–µ—Ç username")
        print("   2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª") 
        print("   3. –í –±–æ—Ç–µ: /admin ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ ‚Üí –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª")
        print("   4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ: @username_–∫–∞–Ω–∞–ª–∞ –ù–∞–∑–≤–∞–Ω–∏–µ")
        
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
