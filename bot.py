import logging
import sqlite3
import os
import sys
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.error import BadRequest, Forbidden

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
try:
    from config import BOT_TOKEN, ADMIN_ID, DB_PATH, TEXTS, BUTTONS, DEBUG, PORT
except ImportError as e:
    print(f"üî¥ –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE" or not BOT_TOKEN:
    print("üî¥ –û–®–ò–ë–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–∏ BOT_TOKEN!")
    sys.exit(1)

if ADMIN_ID == 123456789:
    print("üî¥ –û–®–ò–ë–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–∏ ADMIN_ID!")
    sys.exit(1)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_level = logging.DEBUG if DEBUG else logging.INFO
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=log_level
)
logger = logging.getLogger(__name__)

logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")

class Database:
    def __init__(self, db_path):
        self.db_path = db_path
        self._ensure_db_directory()
        self.init_db()
    
    def _ensure_db_directory(self):
        db_dir = os.path.dirname(self.db_path)
        if db_dir and not os.path.exists(db_dir):
            os.makedirs(db_dir, exist_ok=True)
    
    def get_connection(self):
        return sqlite3.connect(self.db_path)
    
    def init_db(self):
        tables = [
            '''CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                joined_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            '''CREATE TABLE IF NOT EXISTS subscription_channels (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                channel_username TEXT,
                channel_url TEXT,
                channel_name TEXT,
                channel_type TEXT DEFAULT 'public',
                added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            '''CREATE TABLE IF NOT EXISTS confirmed_subscriptions (
                user_id INTEGER,
                channel_id INTEGER,
                confirmed BOOLEAN DEFAULT FALSE,
                confirmed_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, channel_id)
            )''',
            '''CREATE TABLE IF NOT EXISTS referral_channels (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                channel_url TEXT NOT NULL,
                channel_name TEXT,
                description TEXT,
                added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )'''
        ]
        
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                for table_sql in tables:
                    cursor.execute(table_sql)
                conn.commit()
            logger.info("üü¢ –ë–∞–∑–∞ –≥–æ—Ç–æ–≤–∞")
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ë–î: {e}")
            raise
    
    def add_user(self, user_id, username, full_name):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    'INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)',
                    (user_id, username, full_name)
                )
                conn.commit()
            return True
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–∞: {e}")
            return False
    
    def add_subscription_channel(self, channel_username, channel_url, channel_name, channel_type='public'):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    'INSERT INTO subscription_channels (channel_username, channel_url, channel_name, channel_type) VALUES (?, ?, ?, ?)',
                    (channel_username, channel_url, channel_name, channel_type)
                )
                conn.commit()
            return True
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    def get_subscription_channels(self):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM subscription_channels ORDER BY id')
                return cursor.fetchall()
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def confirm_subscription(self, user_id, channel_id):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    'INSERT OR REPLACE INTO confirmed_subscriptions (user_id, channel_id, confirmed) VALUES (?, ?, TRUE)',
                    (user_id, channel_id)
                )
                conn.commit()
            logger.info(f"üü¢ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: user_id={user_id}, channel_id={channel_id}")
            return True
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return False
    
    def is_subscription_confirmed(self, user_id, channel_id):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    'SELECT confirmed FROM confirmed_subscriptions WHERE user_id = ? AND channel_id = ?',
                    (user_id, channel_id)
                )
                result = cursor.fetchone()
                confirmed = result[0] if result else False
                return confirmed
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False
    
    def remove_subscription_confirmation(self, user_id, channel_id):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    'DELETE FROM confirmed_subscriptions WHERE user_id = ? AND channel_id = ?',
                    (user_id, channel_id)
                )
                conn.commit()
            return True
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return False
    
    def add_referral_channel(self, channel_url, channel_name, description=""):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    'INSERT INTO referral_channels (channel_url, channel_name, description) VALUES (?, ?, ?)',
                    (channel_url, channel_name, description)
                )
                conn.commit()
            return True
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    def get_referral_channels(self):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM referral_channels ORDER BY id')
                return cursor.fetchall()
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def remove_subscription_channel(self, channel_id):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('DELETE FROM subscription_channels WHERE id = ?', (channel_id,))
                cursor.execute('DELETE FROM confirmed_subscriptions WHERE channel_id = ?', (channel_id,))
                conn.commit()
            return True
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return False
    
    def remove_referral_channel(self, channel_id):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('DELETE FROM referral_channels WHERE id = ?', (channel_id,))
                conn.commit()
            return True
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return False
    
    def get_all_users_count(self):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(*) FROM users')
                return cursor.fetchone()[0]
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞: {e}")
            return 0

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
try:
    db = Database(DB_PATH)
except Exception as e:
    logger.error(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î: {e}")
    db = None

async def check_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    if not db:
        return {"all_subscribed": False, "missing_channels": []}
    
    user = update.effective_user
    bot = context.bot
    channels = db.get_subscription_channels()
    
    result = {"all_subscribed": True, "missing_channels": []}
    
    for channel in channels:
        channel_id, channel_username, channel_url, channel_name, channel_type, _ = channel
        
        if channel_type == 'public' and channel_username:
            try:
                clean_username = channel_username.lstrip('@')
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–Ω–∞–ª @{clean_username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                
                # –û—á–∏—â–∞–µ–º username –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_username = re.sub(r'[^a-zA-Z0-9_]', '', clean_username)
                
                if not clean_username:
                    logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π username –∫–∞–Ω–∞–ª–∞: {channel_username}")
                    result["all_subscribed"] = False
                    result["missing_channels"].append({
                        "id": channel_id,
                        "name": channel_name,
                        "type": "public",
                        "url": channel_url,
                        "accessible": False,
                        "error": "–ù–µ–≤–µ—Ä–Ω—ã–π username –∫–∞–Ω–∞–ª–∞"
                    })
                    continue
                
                subscribed = False
                channel_accessible = False
                last_error = None
                
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç –ø–æ username
                    chat = await bot.get_chat(f"@{clean_username}")
                    channel_accessible = True
                    logger.info(f"‚úÖ –ß–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {chat.title}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        chat_member = await bot.get_chat_member(chat.id, user.id)
                        status = chat_member.status
                        subscribed = status in ['member', 'administrator', 'creator', 'restricted']
                        
                        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ –∫–∞–Ω–∞–ª–µ {channel_name}: {status}")
                        
                        if not subscribed:
                            logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel_name}")
                        else:
                            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel_name}")
                            
                    except BadRequest as e:
                        error_msg = str(e).lower()
                        if "user not found" in error_msg or "user not participant" in error_msg:
                            logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ {channel_name}")
                            subscribed = False
                        else:
                            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                            last_error = e
                            subscribed = False
                    
                except BadRequest as e:
                    error_msg = str(e).lower()
                    last_error = e
                    
                    if "chat not found" in error_msg:
                        logger.error(f"‚ùå –ß–∞—Ç @{clean_username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        channel_accessible = False
                    elif "not enough rights" in error_msg:
                        logger.error(f"üîê –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ @{clean_username}")
                        channel_accessible = False
                    else:
                        logger.error(f"üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ BadRequest: {e}")
                        channel_accessible = False
                        
                except Forbidden as e:
                    logger.error(f"üö´ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É @{clean_username} –∑–∞–ø—Ä–µ—â–µ–Ω")
                    channel_accessible = False
                    last_error = e
                    
                except Exception as e:
                    logger.error(f"üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞: {e}")
                    channel_accessible = False
                    last_error = e
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
                if channel_accessible:
                    if not subscribed:
                        result["all_subscribed"] = False
                        result["missing_channels"].append({
                            "id": channel_id,
                            "name": channel_name,
                            "type": "public",
                            "url": f"https://t.me/{clean_username}",
                            "accessible": True
                        })
                else:
                    # –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
                    result["all_subscribed"] = False
                    error_msg = "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    if last_error:
                        if "chat not found" in str(last_error).lower():
                            error_msg = "–ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                        elif "not enough rights" in str(last_error).lower():
                            error_msg = "–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
                    
                    result["missing_channels"].append({
                        "id": channel_id,
                        "name": channel_name,
                        "type": "public",
                        "url": f"https://t.me/{clean_username}",
                        "accessible": False,
                        "error": error_msg
                    })
                    logger.warning(f"üö´ –ö–∞–Ω–∞–ª {channel_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {error_msg}")
                    
            except Exception as e:
                logger.error(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_name}: {e}")
                result["all_subscribed"] = False
                result["missing_channels"].append({
                    "id": channel_id,
                    "name": channel_name,
                    "type": "public",
                    "url": f"https://t.me/{clean_username}",
                    "accessible": False,
                    "error": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"
                })
        
        elif channel_type == 'private':
            is_confirmed = db.is_subscription_confirmed(user.id, channel_id)
            
            if not is_confirmed:
                result["all_subscribed"] = False
                result["missing_channels"].append({
                    "id": channel_id,
                    "name": channel_name,
                    "type": "private", 
                    "url": channel_url,
                    "accessible": True
                })
    
    return result

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –±–æ—Ç–∞"""
    if not db:
        await update.message.reply_text("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        return
    
    user = update.effective_user
    db.add_user(user.id, user.username, user.full_name)
    
    welcome_text = (
        "üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n"
        "ü§ñ *Subscription Checker Bot*\n\n"
        "üìã *–ß—Ç–æ —è —É–º–µ—é:*\n"
        "‚Ä¢ ‚úÖ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã\n"
        "‚Ä¢ üîì –û—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
        "‚Ä¢ üöÄ –ë—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å\n\n"
        "‚ö°Ô∏è –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏..."
    )
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    subscription_status = await check_subscriptions(update, context)
    
    if subscription_status["all_subscribed"]:
        await show_success_message(update, context)
    else:
        await show_subscription_request(update, context, subscription_status["missing_channels"])

async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    if not db:
        await update.message.reply_text("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        return
    
    user = update.effective_user
    db.add_user(user.id, user.username, user.full_name)
    
    await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫–∏...")
    
    subscription_status = await check_subscriptions(update, context)
    
    if subscription_status["all_subscribed"]:
        await show_success_message(update, context)
    else:
        await show_subscription_request(update, context, subscription_status["missing_channels"])

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    await show_admin_panel(update, context)

async def show_success_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"""
    referral_channels = db.get_referral_channels()
    
    if not referral_channels:
        message = "‚úÖ *–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!*\n\n–î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –æ—Ç–∫—Ä—ã—Ç üéâ"
        if update.callback_query:
            await update.callback_query.edit_message_text(message, parse_mode='Markdown')
        else:
            await update.message.reply_text(message, parse_mode='Markdown')
        return
    
    channel = referral_channels[0]
    channel_id, channel_url, channel_name, description, _ = channel
    
    success_text = f"üéâ *–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!*\n\nüìÅ *{channel_name}*\n{description or 'üî• –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'}\n\nüíé –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
    
    keyboard = [
        [InlineKeyboardButton("üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É", url=channel_url)],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subs")]
    ]
    
    if update.effective_user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception:
            pass
    else:
        await update.message.reply_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_subscription_request(update: Update, context: ContextTypes.DEFAULT_TYPE, missing_channels=None):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not missing_channels:
        missing_channels = []
    
    keyboard = []
    
    for channel_info in missing_channels:
        if channel_info["type"] == "public":
            if not channel_info.get("accessible", True):
                # –î–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚ö†Ô∏è {channel_info['name']} ({channel_info.get('error', '–æ—à–∏–±–∫–∞')})",
                        callback_data="channel_check_error"
                    )
                ])
            else:
                # –î–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
                keyboard.append([
                    InlineKeyboardButton(
                        f"üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: {channel_info['name']}",
                        url=channel_info["url"]
                    )
                ])
        elif channel_info["type"] == "private":
            keyboard.append([
                InlineKeyboardButton(f"üîó {channel_info['name']}", url=channel_info["url"]),
                InlineKeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{channel_info['id']}")
            ])
    
    keyboard.append([InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subs")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    if update.effective_user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤", callback_data="check_channel_settings")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if missing_channels:
        channels_list = ""
        error_channels = []
        
        for channel in missing_channels:
            if channel.get("accessible", True):
                icon = "üì∫" if channel["type"] == "public" else "üîí"
                status = " (–ø–æ–¥–ø–∏—Å–∫–∞)" if channel["type"] == "public" else " (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)"
                channels_list += f"{icon} {channel['name']}{status}\n"
            else:
                channels_list += f"‚ö†Ô∏è {channel['name']} ({channel.get('error', '–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏')})\n"
                error_channels.append(channel)
        
        request_text = f"üìã *–¢—Ä–µ–±—É—é—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—è:*\n\n{channels_list}\nüîê –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏'"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –∞–¥–º–∏–Ω–∞
        if update.effective_user.id == ADMIN_ID and error_channels:
            request_text += f"\n\n‚ö°Ô∏è *–î–ª—è –∞–¥–º–∏–Ω–∞:* {len(error_channels)} –∫–∞–Ω–∞–ª–æ–≤ –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"
    
    else:
        request_text = "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç."
    
    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(request_text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        await update.message.reply_text(request_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not db:
        error_msg = "üî¥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        if update.callback_query:
            await update.callback_query.edit_message_text(error_msg)
        else:
            await update.message.reply_text(error_msg)
        return
    
    total_users = db.get_all_users_count()
    sub_channels = db.get_subscription_channels()
    ref_channels = db.get_referral_channels()
    
    admin_text = (
        f"‚öôÔ∏è *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è*\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚Ä¢ üì∫ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {len(sub_channels)}\n"
        f"‚Ä¢ üíé –§–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(ref_channels)}\n\n"
        f"üõ† *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º*"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="manage_channels")],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subs")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(admin_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(admin_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_manage_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"""
    if not db:
        if update.callback_query:
            await update.callback_query.edit_message_text("üî¥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            await update.message.reply_text("üî¥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    sub_channels = db.get_subscription_channels()
    ref_channels = db.get_referral_channels()
    
    text = (
        f"üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏*\n\n"
        f"üì∫ *–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:* {len(sub_channels)}\n"
        f"üíé *–§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:* {len(ref_channels)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="add_public_channel")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="add_private_channel")],
        [InlineKeyboardButton("üíé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="add_referral_channel")]
    ]
    
    if sub_channels:
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="show_delete_sub")])
    
    if ref_channels:
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="show_delete_ref")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_delete_subscription_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not db:
        await update.callback_query.edit_message_text("üî¥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    channels = db.get_subscription_channels()
    
    if not channels:
        await update.callback_query.edit_message_text("üî¥ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    text = "üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n"
    
    keyboard = []
    for channel in channels:
        channel_id, _, _, channel_name, channel_type, _ = channel
        type_icon = "üîì" if channel_type == 'public' else "üîí"
        keyboard.append([
            InlineKeyboardButton(f"{type_icon} {channel_name}", callback_data=f"delete_sub_{channel_id}")
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_channels")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_delete_referral_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not db:
        await update.callback_query.edit_message_text("üî¥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    channels = db.get_referral_channels()
    
    if not channels:
        await update.callback_query.edit_message_text("üî¥ –ù–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    text = "üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n"
    
    keyboard = []
    for channel in channels:
        channel_id, _, channel_name, _, _ = channel
        keyboard.append([
            InlineKeyboardButton(f"üíé {channel_name}", callback_data=f"delete_ref_{channel_id}")
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_channels")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def check_channel_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not db:
        await update.callback_query.edit_message_text("üî¥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    channels = db.get_subscription_channels()
    bot = context.bot
    
    check_results = "üîß *–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–æ–≤:*\n\n"
    
    for channel in channels:
        channel_id, channel_username, channel_url, channel_name, channel_type, _ = channel
        
        if channel_type == 'public' and channel_username:
            clean_username = channel_username.lstrip('@')
            check_results += f"üì∫ *{channel_name}* (@{clean_username})\n"
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                chat = await bot.get_chat(f"@{clean_username}")
                check_results += "   ‚úÖ –ö–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
                try:
                    bot_member = await bot.get_chat_member(chat.id, bot.id)
                    if bot_member.status in ['administrator', 'creator']:
                        check_results += "   ‚úÖ –ë–æ—Ç - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞
                        if hasattr(bot_member, 'can_restrict_members') and bot_member.can_restrict_members:
                            check_results += "   ‚úÖ –ï—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
                        else:
                            check_results += "   ‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
                            
                        if hasattr(bot_member, 'can_invite_users') and bot_member.can_invite_users:
                            check_results += "   ‚úÖ –ï—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n"
                        else:
                            check_results += "   ‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n"
                    else:
                        check_results += "   ‚ùå –ë–æ—Ç –ù–ï –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                        
                except Exception as e:
                    check_results += f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}\n"
                    
            except BadRequest as e:
                if "chat not found" in str(e).lower():
                    check_results += "   ‚ùå –ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                elif "not enough rights" in str(e).lower():
                    check_results += "   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É\n"
                else:
                    check_results += f"   ‚ùå –û—à–∏–±–∫–∞: {e}\n"
            except Exception as e:
                check_results += f"   ‚ùå –û—à–∏–±–∫–∞: {e}\n"
            
            check_results += "\n"
    
    check_results += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
    check_results += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
    check_results += "‚Ä¢ –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ '–ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'\n"
    check_results += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∫–∞–Ω–∞–ª–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞\n"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subs")],
        [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="manage_channels")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(check_results, reply_markup=reply_markup, parse_mode='Markdown')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    
    if query.data == "check_subs":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
        channels = db.get_subscription_channels()
        for channel in channels:
            channel_id, _, _, _, channel_type, _ = channel
            if channel_type == 'private':
                db.remove_subscription_confirmation(user.id, channel_id)
        
        db.add_user(user.id, user.username, user.full_name)
        subscription_status = await check_subscriptions(update, context)
        
        if subscription_status["all_subscribed"]:
            await show_success_message(update, context)
        else:
            await show_subscription_request(update, context, subscription_status["missing_channels"])
    
    elif query.data.startswith("confirm_"):
        channel_id = int(query.data.replace("confirm_", ""))
        
        if db.confirm_subscription(user.id, channel_id):
            await query.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
            subscription_status = await check_subscriptions(update, context)
            
            if subscription_status["all_subscribed"]:
                await show_success_message(update, context)
            else:
                await show_subscription_request(update, context, subscription_status["missing_channels"])
        else:
            await query.answer("üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)
    
    elif query.data == "admin_panel":
        if user.id == ADMIN_ID:
            await show_admin_panel(update, context)
        else:
            await query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    
    elif query.data == "manage_channels":
        if user.id == ADMIN_ID:
            await show_manage_channels(update, context)
        else:
            await query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    
    elif query.data == "show_delete_sub":
        if user.id == ADMIN_ID:
            await show_delete_subscription_channels(update, context)
        else:
            await query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    
    elif query.data == "show_delete_ref":
        if user.id == ADMIN_ID:
            await show_delete_referral_channels(update, context)
        else:
            await query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    
    elif query.data.startswith("delete_sub_"):
        if user.id == ADMIN_ID:
            channel_id = int(query.data.replace("delete_sub_", ""))
            if db.remove_subscription_channel(channel_id):
                await query.answer("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω", show_alert=True)
                await show_manage_channels(update, context)
            else:
                await query.answer("üî¥ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        else:
            await query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    
    elif query.data.startswith("delete_ref_"):
        if user.id == ADMIN_ID:
            channel_id = int(query.data.replace("delete_ref_", ""))
            if db.remove_referral_channel(channel_id):
                await query.answer("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω", show_alert=True)
                await show_manage_channels(update, context)
            else:
                await query.answer("üî¥ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        else:
            await query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    
    elif query.data == "add_public_channel":
        if user.id == ADMIN_ID:
            context.user_data['awaiting_channel'] = True
            context.user_data['channel_type'] = 'public'
            await query.edit_message_text(
                "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞*\n\n"
                "üìù *–í–ê–ñ–ù–û:* –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`@username –ù–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–Ω–∞–ª–∞`\n\n"
                "üìã *–ü—Ä–∏–º–µ—Ä:*\n"
                "`@my_channel –ú–æ–π –ö–∞–Ω–∞–ª`"
            )
        else:
            await query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    
    elif query.data == "add_private_channel":
        if user.id == ADMIN_ID:
            context.user_data['awaiting_channel'] = True
            context.user_data['channel_type'] = 'private'
            await query.edit_message_text(
                "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞*\n\n"
                "‚ö†Ô∏è *–í–ê–ñ–ù–û:* –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`—Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–Ω–∞–ª–∞`\n\n"
                "üìã *–ü—Ä–∏–º–µ—Ä:*\n"
                "`https://t.me/private_channel –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ö–∞–Ω–∞–ª`"
            )
        else:
            await query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    
    elif query.data == "add_referral_channel":
        if user.id == ADMIN_ID:
            context.user_data['awaiting_channel'] = True
            context.user_data['channel_type'] = 'referral'
            await query.edit_message_text(
                "üíé *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`—Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ –û–ø–∏—Å–∞–Ω–∏–µ`\n\n"
                "üìã *–ü—Ä–∏–º–µ—Ä:*\n"
                "`https://t.me/premium –ü—Ä–µ–º–∏—É–º –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç`"
            )
        else:
            await query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    
    elif query.data == "channel_check_error":
        await query.answer(
            "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "‚Ä¢ –ö–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            "‚Ä¢ –ë–æ—Ç - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞\n"
            "‚Ä¢ –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", 
            show_alert=True
        )
    
    elif query.data == "check_channel_settings":
        if user.id == ADMIN_ID:
            await check_channel_settings(update, context)
        else:
            await query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
    if update.effective_user.id != ADMIN_ID:
        return
    
    if context.user_data.get('awaiting_channel'):
        channel_type = context.user_data.get('channel_type')
        text = update.message.text.strip()
        
        try:
            if channel_type == 'public':
                parts = text.split(' ', 1)
                if len(parts) == 2 and parts[0].startswith('@'):
                    username = parts[0]
                    name = parts[1]
                    url = f"https://t.me/{username.lstrip('@')}"
                    
                    if db.add_subscription_channel(username, url, name, 'public'):
                        await update.message.reply_text(
                            f"‚úÖ *–ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
                            f"üì∫ {name}\n"
                            f"üîó {url}\n\n"
                            f"‚ö†Ô∏è *–ù–µ –∑–∞–±—É–¥—å—Ç–µ:* –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª!"
                        )
                        await show_manage_channels(update, context)
                    else:
                        await update.message.reply_text("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: @username –ù–∞–∑–≤–∞–Ω–∏–µ")
            
            elif channel_type == 'private':
                parts = text.split(' ', 1)
                if len(parts) == 2:
                    url = parts[0]
                    name = parts[1]
                    
                    if db.add_subscription_channel(None, url, name, 'private'):
                        await update.message.reply_text(
                            f"‚úÖ *–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
                            f"üîí {name}\n"
                            f"üîó {url}\n\n"
                            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é"
                        )
                        await show_manage_channels(update, context)
                    else:
                        await update.message.reply_text("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ")
            
            elif channel_type == 'referral':
                parts = text.split(' ', 2)
                if len(parts) >= 2:
                    url = parts[0]
                    name = parts[1]
                    description = parts[2] if len(parts) > 2 else "üî• –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
                    
                    if db.add_referral_channel(url, name, description):
                        await update.message.reply_text(f"üíé *–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!*\n\nüìÅ {name}\nüîó {url}")
                        await show_manage_channels(update, context)
                    else:
                        await update.message.reply_text("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ [–û–ø–∏—Å–∞–Ω–∏–µ]")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            context.user_data['awaiting_channel'] = False
            
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            context.user_data['awaiting_channel'] = False

async def set_commands(application: Application):
    """–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("admin", "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
        BotCommand("check", "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏")
    ]
    await application.bot.set_my_commands(commands)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not db:
        logger.error("üî¥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return
    
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("admin", admin_command))
        application.add_handler(CommandHandler("check", check_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        application.post_init = set_commands
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()
